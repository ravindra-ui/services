## Nodes

node 1: 10.128.0.16
node 2: 10.128.0.17
node 3: 10.128.0.18


## Installation of DNF in RHEL/CentOS 7 (yum package manager)

yum install epel-release
yum install dnf
dnf –-help


# Install Postgresql on all 3 Nodes
dnf -y install https://download.postgresql.org/pub/repos/yum/reporpms/EL-7-x86_64/pgdg-redhat-repo-latest.noarch.rpm
dnf -qy module disable postgresql
dnf install postgresql12-server postgresql12-contrib


# Run initdb in the primary (PG-Node1) and witness (PG-Node-Witness) node only
/usr/pgsql-12/bin/postgresql-12-setup initdb

# Change in the witness node’s postgresql.conf file

vi /var/lib/pgsql/12/data/postgresql.conf

listen_addresses = '*'

# Add in postgresql.conf file in the primary node

vi /var/lib/pgsql/12/data/postgresql.conf

listen_addresses = '*' 
max_wal_senders = 10
max_replication_slots = 10
wal_level = 'replica'
hot_standby = on
archive_mode = on
archive_command = '/bin/true'


# start PostgreSQL 12 service in both the primary and the witness node and enable the services

systemctl start postgresql-12.service
systemctl enable postgresql-12.service
systemctl status postgresql-12.service



## Install repmgr

# install the repmgr on all 3 nodes

-- install wget if not installed:
yum install wget

wget https://download.postgresql.org/pub/repos/yum/reporpms/EL-7-x86_64/pgdg-redhat-repo-latest.noarch.rpm
yum install repmgr12 -y

# creates the repmgr user in primary node only:

su - postgres

createuser --superuser repmgr

# creates the repmgr database in primary node only:

createdb --owner=repmgr repmgr

# change the repmgr user’s default search path

psql -c "ALTER USER repmgr SET search_path TO repmgr, public;"

# add the following line in the primary node’s postgresql.conf file:

vi /var/lib/pgsql/12/data/postgresql.conf

shared_preload_libraries = 'repmgr'



## configuring repmgr

switched back to root user:

exit


For primary node (PG-Node1):
vi /etc/repmgr/12/repmgr.conf

node_id=1
node_name='PG-Node1'
conninfo='host=10.190.0.59 user=repmgr dbname=repmgr connect_timeout=2'
data_directory='/var/lib/pgsql/12/data'

For standby node (PG-Node2):
vi /etc/repmgr/12/repmgr.conf

node_id=2
node_name='PG-Node2'
conninfo='host=10.190.0.58 user=repmgr dbname=repmgr connect_timeout=2'
data_directory='/var/lib/pgsql/12/data'


# add the following lines in the pg_hba.conf file in PG-Node1

vi /var/lib/pgsql/12/data/pg_hba.conf

local   replication     repmgr                              trust
host    replication     repmgr      127.0.0.1/32            trust
host    replication     repmgr      10.190.0.41/32          trust
host    replication     repmgr      10.190.0.43/32          trust
host    replication     repmgr      10.190.0.44/32          trust

local   repmgr          repmgr                              trust
host    repmgr          repmgr      127.0.0.1/32            trust
host    repmgr          repmgr      10.190.0.41/32          trust
host    repmgr          repmgr      10.190.0.43/32          trust
host    repmgr          repmgr      10.190.0.44/32          trust


# restart the PostgreSQL service in the primary node

systemctl restart postgresql-12.service


# test if the standby nodes can connect to the primary node

su - postgres

psql 'host=10.190.0.57 user=repmgr dbname=repmgr connect_timeout=2'

-- the connectivity is working if we see the primary node’s PostgreSQL prompt.at the repmgr database:

# repmgr>


## registers the primary node PostgreSQL instance with repmgr

su - postgres
/usr/pgsql-12/bin/repmgr -f /etc/repmgr/12/repmgr.conf primary register


--output:
INFO: connecting to primary database...
NOTICE: attempting to install extension "repmgr"
NOTICE: "repmgr" extension successfully installed
NOTICE: primary node record (ID: 1) registered


# now quickly check the status of our cluster:

/usr/pgsql-12/bin/repmgr -f /etc/repmgr/12/repmgr.conf cluster show
 ID | Name     | Role    | Status    | Upstream | Location | Priority | Timeline | Connection string                                           
----+----------+---------+-----------+----------+----------+----------+----------+--------------------------------------------------------------
 1  | PG-Node1 | primary | * running |          | default  | 100      | 1        | host=10.128.0.16 user=repmgr dbname=repmgr connect_timeout=2
 
 
 
# run the following command in standby node as the postgres user for a dry-run before actually cloning from the primary:

su - postgres

/usr/pgsql-12/bin/repmgr -h 10.190.0.57 -U repmgr -d repmgr -f /etc/repmgr/12/repmgr.conf standby clone --dry-run

--output:

NOTICE: destination directory "/var/lib/pgsql/12/data" provided
INFO: connecting to source node
DETAIL: connection string is: host=10.128.0.16 user=repmgr dbname=repmgr
DETAIL: current installation size is 32 MB
INFO: "repmgr" extension is installed in database "repmgr"
INFO: replication slot usage not requested;  no replication slot will be set up for this standby
INFO: parameter "max_wal_senders" set to 10
NOTICE: checking for available walsenders on the source node (2 required)
INFO: sufficient walsenders available on the source node
DETAIL: 2 required, 10 available
NOTICE: checking replication connections can be made to the source server (2 required)
INFO: required number of replication connections could be made to the source server
DETAIL: 2 replication connections required
WARNING: data checksums are not enabled and "wal_log_hints" is "off"
DETAIL: pg_rewind requires "wal_log_hints" to be enabled
NOTICE: standby will attach to upstream node 1
HINT: consider using the -c/--fast-checkpoint option
INFO: would execute:
  /usr/pgsql-12/bin/pg_basebackup -l "repmgr base backup"  -D /var/lib/pgsql/12/data -h 10.128.0.16 -p 5432 -U repmgr -X stream 
INFO: all prerequisites for "standby clone" are met


# ahead with the clone operation on standby node:

/usr/pgsql-12/bin/repmgr -h 10.190.0.57 -U repmgr -d repmgr -f /etc/repmgr/12/repmgr.conf standby clone

--output

NOTICE: destination directory "/var/lib/pgsql/12/data" provided
INFO: connecting to source node
DETAIL: connection string is: host=10.128.0.16 user=repmgr dbname=repmgr
DETAIL: current installation size is 32 MB
INFO: replication slot usage not requested;  no replication slot will be set up for this standby
NOTICE: checking for available walsenders on the source node (2 required)
NOTICE: checking replication connections can be made to the source server (2 required)
WARNING: data checksums are not enabled and "wal_log_hints" is "off"
DETAIL: pg_rewind requires "wal_log_hints" to be enabled
INFO: checking and correcting permissions on existing directory "/var/lib/pgsql/12/data"
NOTICE: starting backup (using pg_basebackup)...
HINT: this may take some time; consider using the -c/--fast-checkpoint option
INFO: executing:
  /usr/pgsql-12/bin/pg_basebackup -l "repmgr base backup"  -D /var/lib/pgsql/12/data -h 10.128.0.16 -p 5432 -U repmgr -X stream 
NOTICE: standby clone (using pg_basebackup) complete
NOTICE: you can now start your PostgreSQL server
HINT: for example: pg_ctl -D /var/lib/pgsql/12/data start
HINT: after starting the server, you need to register this standby with "repmgr standby register"



# start the postgresql service in Standby node and enable the service:

systemctl start postgresql-12.service
systemctl enable postgresql-12.service
systemctl status postgresql-12.service


# In standby node as the postgres user to register it with repmgr:

su - postgres

/usr/pgsql-12/bin/repmgr -f /etc/repmgr/12/repmgr.conf standby register

--output:

INFO: connecting to local node "PG-Node2" (ID: 2)
INFO: connecting to primary database
WARNING: --upstream-node-id not supplied, assuming upstream node is primary (node ID: 1)
INFO: standby registration complete
NOTICE: standby node "PG-Node2" (ID: 2) successfully registered


##check the repmgr status:

su - postgres

/usr/pgsql-12/bin/repmgr -f /etc/repmgr/12/repmgr.conf cluster show
 ID | Name     | Role    | Status    | Upstream | Location | Priority | Timeline | Connection string                                           
----+----------+---------+-----------+----------+----------+----------+----------+--------------------------------------------------------------
 1  | PG-Node1 | primary | * running |          | default  | 100      | 1        | host=10.128.0.16 user=repmgr dbname=repmgr connect_timeout=2
 2  | PG-Node2 | standby |   running | PG-Node1 | default  | 100      | 1        | host=10.128.0.17 user=repmgr dbname=repmgr connect_timeout=2


## check the sql query for the status (this is incomplete)
psql -c "SELECT * FROM pg_stat_replication;"





## Setup Witnes node:


# add the following line in the witness node’s postgresql.conf file:

vi /var/lib/pgsql/12/data/postgresql.conf

listen_addresses = '*'
shared_preload_libraries = 'repmgr'


# add the following lines in the pg_hba.conf file in Witness node

vi /var/lib/pgsql/12/data/pg_hba.conf

local   replication     repmgr                              trust
host    replication     repmgr      127.0.0.1/32            trust
host    replication     repmgr      10.190.0.41/32          trust
host    replication     repmgr      10.190.0.43/32          trust
host    replication     repmgr      10.190.0.44/32          trust

local   repmgr          repmgr                              trust
host    repmgr          repmgr      127.0.0.1/32            trust
host    repmgr          repmgr      10.190.0.41/32          trust
host    repmgr          repmgr      10.190.0.43/32          trust
host    repmgr          repmgr      10.190.0.44/32          trust



# creates the repmgr user in witness node:

su - postgres

createuser --superuser repmgr

# creates the repmgr database in primary node only:

createdb --owner=repmgr repmgr

# change the repmgr user’s default search path

psql -c "ALTER USER repmgr SET search_path TO repmgr, public;"




# add the following lines to the repmgr.conf file, located under /etc/repmgr/12/

vi /etc/repmgr/12/repmgr.conf

node_id=3
node_name='PG-Node3'
conninfo='host=10.190.0.44 user=repmgr dbname=repmgr connect_timeout=2'
data_directory='/var/lib/pgsql/12/data'


# restart the PostgreSQL service in the witness node:

systemctl restart postgresql-12.service

#  test the connectivity to witness node repmgr, we can run this command from the primary node:

psql 'host=10.190.0.57 user=repmgr dbname=repmgr connect_timeout=2'

# register the witness node with repmgr(primary node ip) 

su - postgres
/usr/pgsql-12/bin/repmgr -f /etc/repmgr/12/repmgr.conf witness register -h 10.190.0.57

--output:

INFO: connecting to witness node "PG-Node3" (ID: 3)
INFO: connecting to primary node
NOTICE: attempting to install extension "repmgr"
NOTICE: "repmgr" extension successfully installed
INFO: witness registration complete
NOTICE: witness node "PG-Node3" (ID: 3) successfully registered


# check the status of the overall setup from any node:

/usr/pgsql-12/bin/repmgr -f /etc/repmgr/12/repmgr.conf cluster show --compact

 ID | Name     | Role    | Status    | Upstream | Location | Prio. | TLI
----+----------+---------+-----------+----------+----------+-------+-----
 1  | PG-Node1 | primary | * running |          | default  | 100   | 1   
 2  | PG-Node2 | standby |   running | PG-Node1 | default  | 100   | 1   
 3  | PG-Node3 | witness | * running | PG-Node1 | default  | 0     | n/a 


## In all 3 nodes:

visudo

Defaults:postgres !requiretty
postgres ALL = NOPASSWD: /usr/bin/systemctl stop postgresql-12.service, /usr/bin/systemctl start postgresql-12.service, /usr/bin/systemctl restart postgresql-12.service, /usr/bin/systemctl reload postgresql-12.service, /usr/bin/systemctl start repmgr-12.service, /usr/bin/systemctl stop repmgr-12.service



##  Configuring repmgrd Parameters on all nodes


vi /etc/repmgr/12/repmgr.conf


failover='automatic'
promote_command='/usr/pgsql-12/bin/repmgr standby promote -f /etc/repmgr/12/repmgr.conf --log-to-file'
follow_command='/usr/pgsql-12/bin/repmgr standby follow -f /etc/repmgr/12/repmgr.conf --log-to-file --upstream-node-id=%n'
monitor_interval_secs=2
connection_check_type='ping'
reconnect_attempts=4
reconnect_interval=8
primary_visibility_consensus=true
standby_disconnect_on_failover=true
repmgrd_service_start_command='sudo /usr/bin/systemctl start repmgr-12.service'
repmgrd_service_stop_command='sudo /usr/bin/systemctl stop repmgr-12.service'
service_start_command='sudo /usr/bin/systemctl start postgresql-12.service'
service_stop_command='sudo /usr/bin/systemctl stop postgresql-12.service'
service_restart_command='sudo /usr/bin/systemctl restart postgresql-12.service'
service_reload_command='sudo /usr/bin/systemctl reload postgresql-12.service'
monitoring_history=yes
log_status_interval=60

#Only in standby node
priority=60


## Starting the repmgr Daemon on all 3 nodes

su - postgres

/usr/pgsql-12/bin/repmgr -f /etc/repmgr/12/repmgr.conf daemon start --dry-run

--output:
INFO: prerequisites for starting repmgrd met
DETAIL: following command would be executed:
  sudo /usr/bin/systemctl start repmgr12.service
  

# start the repmgr daemon on all 3 nodes:

su - postgres

/usr/pgsql-12/bin/repmgr -f /etc/repmgr/12/repmgr.conf daemon start

--output:

NOTICE: executing: "sudo /usr/bin/systemctl start repmgr-12.service"
NOTICE: repmgrd was successfully started
  
--Error: 

-bash-4.2$ /usr/pgsql-12/bin/repmgr -f /etc/repmgr/12/repmgr.conf daemon start
NOTICE: executing: "sudo /usr/bin/systemctl start repmgr-12.service"
ERROR: unable to start repmgrd
DETAIL: Job for repmgr-12.service failed. See "systemctl status repmgr-12.service" and "journalctl -xe" for details.

Solution: create directory with root user  
[root@pg-jeet-1 ~]# mkdir -p /run/repmgr/
[root@pg-jeet-1 ~]# chown -R postgres:postgres /run/repmgr



# check the service startup event from the primary or standby nodes:

/usr/pgsql-12/bin/repmgr -f /etc/repmgr/12/repmgr.conf cluster event --event=repmgrd_start

--output
 Node ID | Name     | Event         | OK | Timestamp           | Details                                                         
---------+----------+---------------+----+---------------------+------------------------------------------------------------------
 3       | PG-Node3 | repmgrd_start | t  | 2022-02-27 17:51:29 | witness monitoring connection to primary node "PG-Node1" (ID: 1)
 2       | PG-Node2 | repmgrd_start | t  | 2022-02-27 17:49:44 | monitoring connection to upstream node "PG-Node1" (ID: 1)       
 1       | PG-Node1 | repmgrd_start | t  | 2022-02-27 17:44:51 | monitoring cluster primary "PG-Node1" (ID: 1)  
 
 
# check the daemon output from the syslog in any of the standbys: 

cat /var/log/messages | grep repmgr | less



## Simulating a Failed Primary

systemctl stop postgresql-12.service
